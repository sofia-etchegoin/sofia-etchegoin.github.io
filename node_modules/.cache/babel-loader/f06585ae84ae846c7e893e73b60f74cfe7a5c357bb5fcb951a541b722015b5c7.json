{"ast":null,"code":"import _classPrivateFieldInitSpec from \"/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nvar _queryCache, _mutationCache, _defaultOptions, _queryDefaults, _mutationDefaults, _mountCount, _unsubscribeFocus, _unsubscribeOnline;\n// src/queryClient.ts\nimport { functionalUpdate, hashKey, hashQueryKeyByOptions, noop, partialMatchKey } from \"./utils.js\";\nimport { QueryCache } from \"./queryCache.js\";\nimport { MutationCache } from \"./mutationCache.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar QueryClient = (_queryCache = /*#__PURE__*/new WeakMap(), _mutationCache = /*#__PURE__*/new WeakMap(), _defaultOptions = /*#__PURE__*/new WeakMap(), _queryDefaults = /*#__PURE__*/new WeakMap(), _mutationDefaults = /*#__PURE__*/new WeakMap(), _mountCount = /*#__PURE__*/new WeakMap(), _unsubscribeFocus = /*#__PURE__*/new WeakMap(), _unsubscribeOnline = /*#__PURE__*/new WeakMap(), class QueryClient {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classPrivateFieldInitSpec(this, _queryCache, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _mutationCache, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _defaultOptions, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _queryDefaults, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _mutationDefaults, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _mountCount, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _unsubscribeFocus, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _unsubscribeOnline, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _queryCache, config.queryCache || new QueryCache());\n    _classPrivateFieldSet(this, _mutationCache, config.mutationCache || new MutationCache());\n    _classPrivateFieldSet(this, _defaultOptions, config.defaultOptions || {});\n    _classPrivateFieldSet(this, _queryDefaults, /* @__PURE__ */new Map());\n    _classPrivateFieldSet(this, _mutationDefaults, /* @__PURE__ */new Map());\n    _classPrivateFieldSet(this, _mountCount, 0);\n  }\n  mount() {\n    var _this$mountCount, _this$mountCount2;\n    _classPrivateFieldSet(this, _mountCount, (_this$mountCount = _classPrivateFieldGet(this, _mountCount), _this$mountCount2 = _this$mountCount++, _this$mountCount)), _this$mountCount2;\n    if (_classPrivateFieldGet(this, _mountCount) !== 1) return;\n    _classPrivateFieldSet(this, _unsubscribeFocus, focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations();\n        _classPrivateFieldGet(this, _queryCache).onFocus();\n      }\n    }));\n    _classPrivateFieldSet(this, _unsubscribeOnline, onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations();\n        _classPrivateFieldGet(this, _queryCache).onOnline();\n      }\n    }));\n  }\n  unmount() {\n    var _this$mountCount3, _this$mountCount4, _classPrivateFieldGet2, _classPrivateFieldGet3;\n    _classPrivateFieldSet(this, _mountCount, (_this$mountCount3 = _classPrivateFieldGet(this, _mountCount), _this$mountCount4 = _this$mountCount3--, _this$mountCount3)), _this$mountCount4;\n    if (_classPrivateFieldGet(this, _mountCount) !== 0) return;\n    (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _unsubscribeFocus)) === null || _classPrivateFieldGet2 === void 0 || _classPrivateFieldGet2.call(this);\n    _classPrivateFieldSet(this, _unsubscribeFocus, void 0);\n    (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _unsubscribeOnline)) === null || _classPrivateFieldGet3 === void 0 || _classPrivateFieldGet3.call(this);\n    _classPrivateFieldSet(this, _unsubscribeOnline, void 0);\n  }\n  isFetching(filters) {\n    return _classPrivateFieldGet(this, _queryCache).findAll({\n      ...filters,\n      fetchStatus: \"fetching\"\n    }).length;\n  }\n  isMutating(filters) {\n    return _classPrivateFieldGet(this, _mutationCache).findAll({\n      ...filters,\n      status: \"pending\"\n    }).length;\n  }\n  getQueryData(queryKey) {\n    var _classPrivateFieldGet4;\n    return (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _queryCache).find({\n      queryKey\n    })) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.state.data;\n  }\n  ensureQueryData(options) {\n    const cachedData = this.getQueryData(options.queryKey);\n    return cachedData !== void 0 ? Promise.resolve(cachedData) : this.fetchQuery(options);\n  }\n  getQueriesData(filters) {\n    return this.getQueryCache().findAll(filters).map(_ref => {\n      let {\n        queryKey,\n        state\n      } = _ref;\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n  setQueryData(queryKey, updater, options) {\n    const query = _classPrivateFieldGet(this, _queryCache).find({\n      queryKey\n    });\n    const prevData = query === null || query === void 0 ? void 0 : query.state.data;\n    const data = functionalUpdate(updater, prevData);\n    if (typeof data === \"undefined\") {\n      return void 0;\n    }\n    const defaultedOptions = this.defaultQueryOptions({\n      queryKey\n    });\n    return _classPrivateFieldGet(this, _queryCache).build(this, defaultedOptions).setData(data, {\n      ...options,\n      manual: true\n    });\n  }\n  setQueriesData(filters, updater, options) {\n    return notifyManager.batch(() => this.getQueryCache().findAll(filters).map(_ref2 => {\n      let {\n        queryKey\n      } = _ref2;\n      return [queryKey, this.setQueryData(queryKey, updater, options)];\n    }));\n  }\n  getQueryState(queryKey) {\n    var _classPrivateFieldGet5;\n    return (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _queryCache).find({\n      queryKey\n    })) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.state;\n  }\n  removeQueries(filters) {\n    const queryCache = _classPrivateFieldGet(this, _queryCache);\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n  resetQueries(filters, options) {\n    const queryCache = _classPrivateFieldGet(this, _queryCache);\n    const refetchFilters = {\n      type: \"active\",\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n  cancelQueries() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let cancelOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const defaultedCancelOptions = {\n      revert: true,\n      ...cancelOptions\n    };\n    const promises = notifyManager.batch(() => _classPrivateFieldGet(this, _queryCache).findAll(filters).map(query => query.cancel(defaultedCancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n  invalidateQueries() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return notifyManager.batch(() => {\n      var _ref3, _filters$refetchType;\n      _classPrivateFieldGet(this, _queryCache).findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n      if (filters.refetchType === \"none\") {\n        return Promise.resolve();\n      }\n      const refetchFilters = {\n        ...filters,\n        type: (_ref3 = (_filters$refetchType = filters.refetchType) !== null && _filters$refetchType !== void 0 ? _filters$refetchType : filters.type) !== null && _ref3 !== void 0 ? _ref3 : \"active\"\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n  refetchQueries() {\n    var _options$cancelRefetc;\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: (_options$cancelRefetc = options === null || options === void 0 ? void 0 : options.cancelRefetch) !== null && _options$cancelRefetc !== void 0 ? _options$cancelRefetc : true\n    };\n    const promises = notifyManager.batch(() => _classPrivateFieldGet(this, _queryCache).findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      let promise = query.fetch(void 0, fetchOptions);\n      if (!fetchOptions.throwOnError) {\n        promise = promise.catch(noop);\n      }\n      return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n    }));\n    return Promise.all(promises).then(noop);\n  }\n  fetchQuery(options) {\n    const defaultedOptions = this.defaultQueryOptions(options);\n    if (typeof defaultedOptions.retry === \"undefined\") {\n      defaultedOptions.retry = false;\n    }\n    const query = _classPrivateFieldGet(this, _queryCache).build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n  prefetchQuery(options) {\n    return this.fetchQuery(options).then(noop).catch(noop);\n  }\n  fetchInfiniteQuery(options) {\n    options.behavior = infiniteQueryBehavior(options.pages);\n    return this.fetchQuery(options);\n  }\n  prefetchInfiniteQuery(options) {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop);\n  }\n  resumePausedMutations() {\n    return _classPrivateFieldGet(this, _mutationCache).resumePausedMutations();\n  }\n  getQueryCache() {\n    return _classPrivateFieldGet(this, _queryCache);\n  }\n  getMutationCache() {\n    return _classPrivateFieldGet(this, _mutationCache);\n  }\n  getDefaultOptions() {\n    return _classPrivateFieldGet(this, _defaultOptions);\n  }\n  setDefaultOptions(options) {\n    _classPrivateFieldSet(this, _defaultOptions, options);\n  }\n  setQueryDefaults(queryKey, options) {\n    _classPrivateFieldGet(this, _queryDefaults).set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options\n    });\n  }\n  getQueryDefaults(queryKey) {\n    const defaults = [..._classPrivateFieldGet(this, _queryDefaults).values()];\n    let result = {};\n    defaults.forEach(queryDefault => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        result = {\n          ...result,\n          ...queryDefault.defaultOptions\n        };\n      }\n    });\n    return result;\n  }\n  setMutationDefaults(mutationKey, options) {\n    _classPrivateFieldGet(this, _mutationDefaults).set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options\n    });\n  }\n  getMutationDefaults(mutationKey) {\n    const defaults = [..._classPrivateFieldGet(this, _mutationDefaults).values()];\n    let result = {};\n    defaults.forEach(queryDefault => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = {\n          ...result,\n          ...queryDefault.defaultOptions\n        };\n      }\n    });\n    return result;\n  }\n  defaultQueryOptions(options) {\n    if (options !== null && options !== void 0 && options._defaulted) {\n      return options;\n    }\n    const defaultedOptions = {\n      ..._classPrivateFieldGet(this, _defaultOptions).queries,\n      ...((options === null || options === void 0 ? void 0 : options.queryKey) && this.getQueryDefaults(options.queryKey)),\n      ...options,\n      _defaulted: true\n    };\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    }\n    if (typeof defaultedOptions.refetchOnReconnect === \"undefined\") {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n    }\n    if (typeof defaultedOptions.throwOnError === \"undefined\") {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n    }\n    if (typeof defaultedOptions.networkMode === \"undefined\" && defaultedOptions.persister) {\n      defaultedOptions.networkMode = \"offlineFirst\";\n    }\n    return defaultedOptions;\n  }\n  defaultMutationOptions(options) {\n    if (options !== null && options !== void 0 && options._defaulted) {\n      return options;\n    }\n    return {\n      ..._classPrivateFieldGet(this, _defaultOptions).mutations,\n      ...((options === null || options === void 0 ? void 0 : options.mutationKey) && this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true\n    };\n  }\n  clear() {\n    _classPrivateFieldGet(this, _queryCache).clear();\n    _classPrivateFieldGet(this, _mutationCache).clear();\n  }\n});\nexport { QueryClient };","map":{"version":3,"names":["functionalUpdate","hashKey","hashQueryKeyByOptions","noop","partialMatchKey","QueryCache","MutationCache","focusManager","onlineManager","notifyManager","infiniteQueryBehavior","QueryClient","_queryCache","WeakMap","_mutationCache","_defaultOptions","_queryDefaults","_mutationDefaults","_mountCount","_unsubscribeFocus","_unsubscribeOnline","constructor","config","arguments","length","undefined","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","queryCache","mutationCache","defaultOptions","Map","mount","_this$mountCount","_this$mountCount2","_classPrivateFieldGet","subscribe","isFocused","resumePausedMutations","onFocus","isOnline","onOnline","unmount","_this$mountCount3","_this$mountCount4","_classPrivateFieldGet2","_classPrivateFieldGet3","call","isFetching","filters","findAll","fetchStatus","isMutating","status","getQueryData","queryKey","_classPrivateFieldGet4","find","state","data","ensureQueryData","options","cachedData","Promise","resolve","fetchQuery","getQueriesData","getQueryCache","map","_ref","setQueryData","updater","query","prevData","defaultedOptions","defaultQueryOptions","build","setData","manual","setQueriesData","batch","_ref2","getQueryState","_classPrivateFieldGet5","removeQueries","forEach","remove","resetQueries","refetchFilters","type","reset","refetchQueries","cancelQueries","cancelOptions","defaultedCancelOptions","revert","promises","cancel","all","then","catch","invalidateQueries","_ref3","_filters$refetchType","invalidate","refetchType","_options$cancelRefetc","fetchOptions","cancelRefetch","filter","isDisabled","promise","fetch","throwOnError","retry","isStaleByTime","staleTime","prefetchQuery","fetchInfiniteQuery","behavior","pages","prefetchInfiniteQuery","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","set","getQueryDefaults","defaults","values","result","queryDefault","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","queries","queryHash","refetchOnReconnect","networkMode","suspense","persister","defaultMutationOptions","mutations","clear"],"sources":["/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@tanstack/query-core/src/queryClient.ts"],"sourcesContent":["import {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type { DataTag, NoInfer } from './types'\nimport type { QueryState } from './query'\nimport type {\n  CancelOptions,\n  DefaultError,\n  DefaultOptions,\n  DefaultedQueryObserverOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryClientConfig,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  SetDataOptions,\n} from './types'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  #queryCache: QueryCache\n  #mutationCache: MutationCache\n  #defaultOptions: DefaultOptions\n  #queryDefaults: Map<string, QueryDefaults>\n  #mutationDefaults: Map<string, MutationDefaults>\n  #mountCount: number\n  #unsubscribeFocus?: () => void\n  #unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.#queryCache = config.queryCache || new QueryCache()\n    this.#mutationCache = config.mutationCache || new MutationCache()\n    this.#defaultOptions = config.defaultOptions || {}\n    this.#queryDefaults = new Map()\n    this.#mutationDefaults = new Map()\n    this.#mountCount = 0\n  }\n\n  mount(): void {\n    this.#mountCount++\n    if (this.#mountCount !== 1) return\n\n    this.#unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.#queryCache.onFocus()\n      }\n    })\n    this.#unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.#queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.#mountCount--\n    if (this.#mountCount !== 0) return\n\n    this.#unsubscribeFocus?.()\n    this.#unsubscribeFocus = undefined\n\n    this.#unsubscribeOnline?.()\n    this.#unsubscribeOnline = undefined\n  }\n\n  isFetching(filters?: QueryFilters): number {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: 'fetching' })\n      .length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.#mutationCache.findAll({ ...filters, status: 'pending' }).length\n  }\n\n  getQueryData<\n    TQueryFnData = unknown,\n    TaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(queryKey: TaggedQueryKey): TInferredQueryFnData | undefined\n  getQueryData(queryKey: QueryKey) {\n    return this.#queryCache.find({ queryKey })?.state.data\n  }\n\n  ensureQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const cachedData = this.getQueryData<TData>(options.queryKey)\n\n    return cachedData !== undefined\n      ? Promise.resolve(cachedData)\n      : this.fetchQuery(options)\n  }\n\n  getQueriesData<TQueryFnData = unknown>(\n    filters: QueryFilters,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return this.getQueryCache()\n      .findAll(filters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TQueryFnData | undefined\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<\n    TQueryFnData = unknown,\n    TaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(\n    queryKey: TaggedQueryKey,\n    updater: Updater<\n      NoInfer<TInferredQueryFnData> | undefined,\n      NoInfer<TInferredQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): TInferredQueryFnData | undefined {\n    const query = this.#queryCache.find<TInferredQueryFnData>({ queryKey })\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const defaultedOptions = this.defaultQueryOptions<\n      any,\n      any,\n      unknown,\n      any,\n      QueryKey\n    >({ queryKey })\n\n    return this.#queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TQueryFnData>(\n    filters: QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(filters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<TQueryFnData = unknown, TError = DefaultError>(\n    queryKey: QueryKey,\n  ): QueryState<TQueryFnData, TError> | undefined {\n    return this.#queryCache.find<TQueryFnData, TError>({ queryKey })?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void {\n    const queryCache = this.#queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void> {\n    const queryCache = this.#queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(\n    filters: QueryFilters = {},\n    cancelOptions: CancelOptions = {},\n  ): Promise<void> {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions }\n\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(defaultedCancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters: InvalidateQueryFilters = {},\n    options: InvalidateOptions = {},\n  ): Promise<void> {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters: RefetchQueryFilters = {},\n    options?: RefetchOptions,\n  ): Promise<void> {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options?.cancelRefetch ?? true,\n    }\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) => {\n          let promise = query.fetch(undefined, fetchOptions)\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop)\n          }\n          return query.state.fetchStatus === 'paused'\n            ? Promise.resolve()\n            : promise\n        }),\n    )\n\n    return Promise.all(promises).then(noop)\n  }\n\n  fetchQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options: FetchQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(options).then(noop).catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n    return this.fetchQuery(options)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    return this.#mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.#queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.#mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.#defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.#defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: Partial<\n      Omit<QueryObserverOptions<unknown, any, any, any>, 'queryKey'>\n    >,\n  ): void {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options,\n    })\n  }\n\n  getQueryDefaults(\n    queryKey: QueryKey,\n  ): QueryObserverOptions<any, any, any, any, any> {\n    const defaults = [...this.#queryDefaults.values()]\n\n    let result: QueryObserverOptions<any, any, any, any, any> = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n    return result\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: Omit<MutationObserverOptions<any, any, any, any>, 'mutationKey'>,\n  ): void {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options,\n    })\n  }\n\n  getMutationDefaults(\n    mutationKey: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> {\n    const defaults = [...this.#mutationDefaults.values()]\n\n    let result: MutationObserverOptions<any, any, any, any> = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n\n    return result\n  }\n\n  defaultQueryOptions<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options?:\n      | QueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey,\n          TPageParam\n        >\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...(options?.queryKey && this.getQueryDefaults(options.queryKey)),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.throwOnError === 'undefined') {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense\n    }\n\n    if (\n      typeof defaultedOptions.networkMode === 'undefined' &&\n      defaultedOptions.persister\n    ) {\n      defaultedOptions.networkMode = 'offlineFirst'\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey &&\n        this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.#queryCache.clear()\n    this.#mutationCache.clear()\n  }\n}\n"],"mappings":";;;;;AAAA,SACEA,gBAAA,EACAC,OAAA,EACAC,qBAAA,EACAC,IAAA,EACAC,eAAA,QACK;AACP,SAASC,UAAA,QAAkB;AAC3B,SAASC,aAAA,QAAqB;AAC9B,SAASC,YAAA,QAAoB;AAC7B,SAASC,aAAA,QAAqB;AAC9B,SAASC,aAAA,QAAqB;AAC9B,SAASC,qBAAA,QAA6B;AAyC/B,IAAMC,WAAA,IAAAC,WAAA,oBAAAC,OAAA,IAAAC,cAAA,oBAAAD,OAAA,IAAAE,eAAA,oBAAAF,OAAA,IAAAG,cAAA,oBAAAH,OAAA,IAAAI,iBAAA,oBAAAJ,OAAA,IAAAK,WAAA,oBAAAL,OAAA,IAAAM,iBAAA,oBAAAN,OAAA,IAAAO,kBAAA,oBAAAP,OAAA,IAAN,MAAMF,WAAA,CAAY;EAUvBU,YAAA,EAA4C;IAAA,IAAhCC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,CAAC;IAAAG,0BAAA,OAAAd,WAAA;MAAAe,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAZ,cAAA;MAAAa,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAX,eAAA;MAAAY,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAV,cAAA;MAAAW,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAT,iBAAA;MAAAU,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAR,WAAA;MAAAS,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAP,iBAAA;MAAAQ,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAN,kBAAA;MAAAO,QAAA;MAAAC,KAAA;IAAA;IACvCC,qBAAA,OAAAjB,WAAA,EAAmBU,MAAA,CAAOQ,UAAA,IAAc,IAAIzB,UAAA,CAAW;IACvDwB,qBAAA,OAAAf,cAAA,EAAsBQ,MAAA,CAAOS,aAAA,IAAiB,IAAIzB,aAAA,CAAc;IAChEuB,qBAAA,OAAAd,eAAA,EAAuBO,MAAA,CAAOU,cAAA,IAAkB,CAAC;IACjDH,qBAAA,OAAAb,cAAA,EAAsB,mBAAIiB,GAAA,CAAI;IAC9BJ,qBAAA,OAAAZ,iBAAA,EAAyB,mBAAIgB,GAAA,CAAI;IACjCJ,qBAAA,OAAAX,WAAA,EAAmB;EACrB;EAEAgB,MAAA,EAAc;IAAA,IAAAC,gBAAA,EAAAC,iBAAA;IACZP,qBAAA,OAAAX,WAAA,GAAAiB,gBAAA,GAAAE,qBAAA,OAAAnB,WAAA,GAAAkB,iBAAA,GAAAD,gBAAA,IAAAA,gBAAA,IAAAC,iBAAA;IACA,IAAIC,qBAAA,OAAAnB,WAAA,MAAqB,GAAG;IAE5BW,qBAAA,OAAAV,iBAAA,EAAyBZ,YAAA,CAAa+B,SAAA,CAAU,MAAM;MACpD,IAAI/B,YAAA,CAAagC,SAAA,CAAU,GAAG;QAC5B,KAAKC,qBAAA,CAAsB;QAC3BH,qBAAA,OAAAzB,WAAA,EAAiB6B,OAAA,CAAQ;MAC3B;IACF,CAAC;IACDZ,qBAAA,OAAAT,kBAAA,EAA0BZ,aAAA,CAAc8B,SAAA,CAAU,MAAM;MACtD,IAAI9B,aAAA,CAAckC,QAAA,CAAS,GAAG;QAC5B,KAAKF,qBAAA,CAAsB;QAC3BH,qBAAA,OAAAzB,WAAA,EAAiB+B,QAAA,CAAS;MAC5B;IACF,CAAC;EACH;EAEAC,QAAA,EAAgB;IAAA,IAAAC,iBAAA,EAAAC,iBAAA,EAAAC,sBAAA,EAAAC,sBAAA;IACdnB,qBAAA,OAAAX,WAAA,GAAA2B,iBAAA,GAAAR,qBAAA,OAAAnB,WAAA,GAAA4B,iBAAA,GAAAD,iBAAA,IAAAA,iBAAA,IAAAC,iBAAA;IACA,IAAIT,qBAAA,OAAAnB,WAAA,MAAqB,GAAG;IAE5B,CAAA6B,sBAAA,GAAAV,qBAAA,OAAAlB,iBAAA,eAAA4B,sBAAA,eAAAA,sBAAA,CAAAE,IAAA;IACApB,qBAAA,OAAAV,iBAAA,EAAyB;IAEzB,CAAA6B,sBAAA,GAAAX,qBAAA,OAAAjB,kBAAA,eAAA4B,sBAAA,eAAAA,sBAAA,CAAAC,IAAA;IACApB,qBAAA,OAAAT,kBAAA,EAA0B;EAC5B;EAEA8B,WAAWC,OAAA,EAAgC;IACzC,OAAOd,qBAAA,OAAAzB,WAAA,EAAiBwC,OAAA,CAAQ;MAAE,GAAGD,OAAA;MAASE,WAAA,EAAa;IAAW,CAAC,EACpE7B,MAAA;EACL;EAEA8B,WAAWH,OAAA,EAAmC;IAC5C,OAAOd,qBAAA,OAAAvB,cAAA,EAAoBsC,OAAA,CAAQ;MAAE,GAAGD,OAAA;MAASI,MAAA,EAAQ;IAAU,CAAC,EAAE/B,MAAA;EACxE;EAYAgC,aAAaC,QAAA,EAAoB;IAAA,IAAAC,sBAAA;IAC/B,QAAAA,sBAAA,GAAOrB,qBAAA,OAAAzB,WAAA,EAAiB+C,IAAA,CAAK;MAAEF;IAAS,CAAC,eAAAC,sBAAA,uBAAlCA,sBAAA,CAAqCE,KAAA,CAAMC,IAAA;EACpD;EAEAC,gBAMEC,OAAA,EACgB;IAChB,MAAMC,UAAA,GAAa,KAAKR,YAAA,CAAoBO,OAAA,CAAQN,QAAQ;IAE5D,OAAOO,UAAA,KAAe,SAClBC,OAAA,CAAQC,OAAA,CAAQF,UAAU,IAC1B,KAAKG,UAAA,CAAWJ,OAAO;EAC7B;EAEAK,eACEjB,OAAA,EAC6C;IAC7C,OAAO,KAAKkB,aAAA,CAAc,EACvBjB,OAAA,CAAQD,OAAO,EACfmB,GAAA,CAAIC,IAAA,IAAyB;MAAA,IAAxB;QAAEd,QAAA;QAAUG;MAAM,IAAAW,IAAA;MACtB,MAAMV,IAAA,GAAOD,KAAA,CAAMC,IAAA;MACnB,OAAO,CAACJ,QAAA,EAAUI,IAAI;IACxB,CAAC;EACL;EAEAW,aAUEf,QAAA,EACAgB,OAAA,EAIAV,OAAA,EACkC;IAClC,MAAMW,KAAA,GAAQrC,qBAAA,OAAAzB,WAAA,EAAiB+C,IAAA,CAA2B;MAAEF;IAAS,CAAC;IACtE,MAAMkB,QAAA,GAAWD,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAOd,KAAA,CAAMC,IAAA;IAC9B,MAAMA,IAAA,GAAO7D,gBAAA,CAAiByE,OAAA,EAASE,QAAQ;IAE/C,IAAI,OAAOd,IAAA,KAAS,aAAa;MAC/B,OAAO;IACT;IAEA,MAAMe,gBAAA,GAAmB,KAAKC,mBAAA,CAM5B;MAAEpB;IAAS,CAAC;IAEd,OAAOpB,qBAAA,OAAAzB,WAAA,EACJkE,KAAA,CAAM,MAAMF,gBAAgB,EAC5BG,OAAA,CAAQlB,IAAA,EAAM;MAAE,GAAGE,OAAA;MAASiB,MAAA,EAAQ;IAAK,CAAC;EAC/C;EAEAC,eACE9B,OAAA,EACAsB,OAAA,EACAV,OAAA,EAC6C;IAC7C,OAAOtD,aAAA,CAAcyE,KAAA,CAAM,MACzB,KAAKb,aAAA,CAAc,EAChBjB,OAAA,CAAQD,OAAO,EACfmB,GAAA,CAAIa,KAAA;MAAA,IAAC;QAAE1B;MAAS,IAAA0B,KAAA;MAAA,OAAM,CACrB1B,QAAA,EACA,KAAKe,YAAA,CAA2Bf,QAAA,EAAUgB,OAAA,EAASV,OAAO,EAC3D;IAAA,EACL;EACF;EAEAqB,cACE3B,QAAA,EAC8C;IAAA,IAAA4B,sBAAA;IAC9C,QAAAA,sBAAA,GAAOhD,qBAAA,OAAAzB,WAAA,EAAiB+C,IAAA,CAA2B;MAAEF;IAAS,CAAC,eAAA4B,sBAAA,uBAAxDA,sBAAA,CAA2DzB,KAAA;EACpE;EAEA0B,cAAcnC,OAAA,EAA8B;IAC1C,MAAMrB,UAAA,GAAAO,qBAAA,CAAa,MAAAzB,WAAA,CAAK;IACxBH,aAAA,CAAcyE,KAAA,CAAM,MAAM;MACxBpD,UAAA,CAAWsB,OAAA,CAAQD,OAAO,EAAEoC,OAAA,CAASb,KAAA,IAAU;QAC7C5C,UAAA,CAAW0D,MAAA,CAAOd,KAAK;MACzB,CAAC;IACH,CAAC;EACH;EAEAe,aAAatC,OAAA,EAAwBY,OAAA,EAAuC;IAC1E,MAAMjC,UAAA,GAAAO,qBAAA,CAAa,MAAAzB,WAAA,CAAK;IAExB,MAAM8E,cAAA,GAAsC;MAC1CC,IAAA,EAAM;MACN,GAAGxC;IACL;IAEA,OAAO1C,aAAA,CAAcyE,KAAA,CAAM,MAAM;MAC/BpD,UAAA,CAAWsB,OAAA,CAAQD,OAAO,EAAEoC,OAAA,CAASb,KAAA,IAAU;QAC7CA,KAAA,CAAMkB,KAAA,CAAM;MACd,CAAC;MACD,OAAO,KAAKC,cAAA,CAAeH,cAAA,EAAgB3B,OAAO;IACpD,CAAC;EACH;EAEA+B,cAAA,EAGiB;IAAA,IAFf3C,OAAA,GAAA5B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAwB,CAAC;IAAA,IACzBwE,aAAA,GAAAxE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA+B,CAAC;IAEhC,MAAMyE,sBAAA,GAAyB;MAAEC,MAAA,EAAQ;MAAM,GAAGF;IAAc;IAEhE,MAAMG,QAAA,GAAWzF,aAAA,CAAcyE,KAAA,CAAM,MACnC7C,qBAAA,OAAAzB,WAAA,EACGwC,OAAA,CAAQD,OAAO,EACfmB,GAAA,CAAKI,KAAA,IAAUA,KAAA,CAAMyB,MAAA,CAAOH,sBAAsB,CAAC,CACxD;IAEA,OAAO/B,OAAA,CAAQmC,GAAA,CAAIF,QAAQ,EAAEG,IAAA,CAAKlG,IAAI,EAAEmG,KAAA,CAAMnG,IAAI;EACpD;EAEAoG,kBAAA,EAGiB;IAAA,IAFfpD,OAAA,GAAA5B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkC,CAAC;IAAA,IACnCwC,OAAA,GAAAxC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA6B,CAAC;IAE9B,OAAOd,aAAA,CAAcyE,KAAA,CAAM,MAAM;MAAA,IAAAsB,KAAA,EAAAC,oBAAA;MAC/BpE,qBAAA,OAAAzB,WAAA,EAAiBwC,OAAA,CAAQD,OAAO,EAAEoC,OAAA,CAASb,KAAA,IAAU;QACnDA,KAAA,CAAMgC,UAAA,CAAW;MACnB,CAAC;MAED,IAAIvD,OAAA,CAAQwD,WAAA,KAAgB,QAAQ;QAClC,OAAO1C,OAAA,CAAQC,OAAA,CAAQ;MACzB;MACA,MAAMwB,cAAA,GAAsC;QAC1C,GAAGvC,OAAA;QACHwC,IAAA,GAAAa,KAAA,IAAAC,oBAAA,GAAMtD,OAAA,CAAQwD,WAAA,cAAAF,oBAAA,cAAAA,oBAAA,GAAetD,OAAA,CAAQwC,IAAA,cAAAa,KAAA,cAAAA,KAAA,GAAQ;MAC/C;MACA,OAAO,KAAKX,cAAA,CAAeH,cAAA,EAAgB3B,OAAO;IACpD,CAAC;EACH;EAEA8B,eAAA,EAGiB;IAAA,IAAAe,qBAAA;IAAA,IAFfzD,OAAA,GAAA5B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA+B,CAAC;IAAA,IAChCwC,OAAA,GAAAxC,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IAEA,MAAMoF,YAAA,GAAe;MACnB,GAAG9C,OAAA;MACH+C,aAAA,GAAAF,qBAAA,GAAe7C,OAAA,aAAAA,OAAA,uBAAAA,OAAA,CAAS+C,aAAA,cAAAF,qBAAA,cAAAA,qBAAA,GAAiB;IAC3C;IACA,MAAMV,QAAA,GAAWzF,aAAA,CAAcyE,KAAA,CAAM,MACnC7C,qBAAA,OAAAzB,WAAA,EACGwC,OAAA,CAAQD,OAAO,EACf4D,MAAA,CAAQrC,KAAA,IAAU,CAACA,KAAA,CAAMsC,UAAA,CAAW,CAAC,EACrC1C,GAAA,CAAKI,KAAA,IAAU;MACd,IAAIuC,OAAA,GAAUvC,KAAA,CAAMwC,KAAA,CAAM,QAAWL,YAAY;MACjD,IAAI,CAACA,YAAA,CAAaM,YAAA,EAAc;QAC9BF,OAAA,GAAUA,OAAA,CAAQX,KAAA,CAAMnG,IAAI;MAC9B;MACA,OAAOuE,KAAA,CAAMd,KAAA,CAAMP,WAAA,KAAgB,WAC/BY,OAAA,CAAQC,OAAA,CAAQ,IAChB+C,OAAA;IACN,CAAC,CACL;IAEA,OAAOhD,OAAA,CAAQmC,GAAA,CAAIF,QAAQ,EAAEG,IAAA,CAAKlG,IAAI;EACxC;EAEAgE,WAOEJ,OAAA,EAOgB;IAChB,MAAMa,gBAAA,GAAmB,KAAKC,mBAAA,CAAoBd,OAAO;IAGzD,IAAI,OAAOa,gBAAA,CAAiBwC,KAAA,KAAU,aAAa;MACjDxC,gBAAA,CAAiBwC,KAAA,GAAQ;IAC3B;IAEA,MAAM1C,KAAA,GAAQrC,qBAAA,OAAAzB,WAAA,EAAiBkE,KAAA,CAAM,MAAMF,gBAAgB;IAE3D,OAAOF,KAAA,CAAM2C,aAAA,CAAczC,gBAAA,CAAiB0C,SAAS,IACjD5C,KAAA,CAAMwC,KAAA,CAAMtC,gBAAgB,IAC5BX,OAAA,CAAQC,OAAA,CAAQQ,KAAA,CAAMd,KAAA,CAAMC,IAAa;EAC/C;EAEA0D,cAMExD,OAAA,EACe;IACf,OAAO,KAAKI,UAAA,CAAWJ,OAAO,EAAEsC,IAAA,CAAKlG,IAAI,EAAEmG,KAAA,CAAMnG,IAAI;EACvD;EAEAqH,mBAOEzD,OAAA,EAO0C;IAC1CA,OAAA,CAAQ0D,QAAA,GAAW/G,qBAAA,CAKjBqD,OAAA,CAAQ2D,KAAK;IACf,OAAO,KAAKvD,UAAA,CAAWJ,OAAO;EAChC;EAEA4D,sBAOE5D,OAAA,EAOe;IACf,OAAO,KAAKyD,kBAAA,CAAmBzD,OAAO,EAAEsC,IAAA,CAAKlG,IAAI,EAAEmG,KAAA,CAAMnG,IAAI;EAC/D;EAEAqC,sBAAA,EAA0C;IACxC,OAAOH,qBAAA,OAAAvB,cAAA,EAAoB0B,qBAAA,CAAsB;EACnD;EAEA6B,cAAA,EAA4B;IAC1B,OAAAhC,qBAAA,CAAO,MAAAzB,WAAA;EACT;EAEAgH,iBAAA,EAAkC;IAChC,OAAAvF,qBAAA,CAAO,MAAAvB,cAAA;EACT;EAEA+G,kBAAA,EAAoC;IAClC,OAAAxF,qBAAA,CAAO,MAAAtB,eAAA;EACT;EAEA+G,kBAAkB/D,OAAA,EAA+B;IAC/ClC,qBAAA,OAAAd,eAAA,EAAuBgD,OAAA;EACzB;EAEAgE,iBACEtE,QAAA,EACAM,OAAA,EAGM;IACN1B,qBAAA,OAAArB,cAAA,EAAoBgH,GAAA,CAAI/H,OAAA,CAAQwD,QAAQ,GAAG;MACzCA,QAAA;MACAzB,cAAA,EAAgB+B;IAClB,CAAC;EACH;EAEAkE,iBACExE,QAAA,EAC+C;IAC/C,MAAMyE,QAAA,GAAW,CAAC,GAAG7F,qBAAA,OAAArB,cAAA,EAAoBmH,MAAA,CAAO,CAAC;IAEjD,IAAIC,MAAA,GAAwD,CAAC;IAE7DF,QAAA,CAAS3C,OAAA,CAAS8C,YAAA,IAAiB;MACjC,IAAIjI,eAAA,CAAgBqD,QAAA,EAAU4E,YAAA,CAAa5E,QAAQ,GAAG;QACpD2E,MAAA,GAAS;UAAE,GAAGA,MAAA;UAAQ,GAAGC,YAAA,CAAarG;QAAe;MACvD;IACF,CAAC;IACD,OAAOoG,MAAA;EACT;EAEAE,oBACEC,WAAA,EACAxE,OAAA,EACM;IACN1B,qBAAA,OAAApB,iBAAA,EAAuB+G,GAAA,CAAI/H,OAAA,CAAQsI,WAAW,GAAG;MAC/CA,WAAA;MACAvG,cAAA,EAAgB+B;IAClB,CAAC;EACH;EAEAyE,oBACED,WAAA,EAC6C;IAC7C,MAAML,QAAA,GAAW,CAAC,GAAG7F,qBAAA,OAAApB,iBAAA,EAAuBkH,MAAA,CAAO,CAAC;IAEpD,IAAIC,MAAA,GAAsD,CAAC;IAE3DF,QAAA,CAAS3C,OAAA,CAAS8C,YAAA,IAAiB;MACjC,IAAIjI,eAAA,CAAgBmI,WAAA,EAAaF,YAAA,CAAaE,WAAW,GAAG;QAC1DH,MAAA,GAAS;UAAE,GAAGA,MAAA;UAAQ,GAAGC,YAAA,CAAarG;QAAe;MACvD;IACF,CAAC;IAED,OAAOoG,MAAA;EACT;EAEAvD,oBAQEd,OAAA,EAsBA;IACA,IAAIA,OAAA,aAAAA,OAAA,eAAAA,OAAA,CAAS0E,UAAA,EAAY;MACvB,OAAO1E,OAAA;IAOT;IAEA,MAAMa,gBAAA,GAAmB;MACvB,GAAGvC,qBAAA,OAAAtB,eAAA,EAAqB2H,OAAA;MACxB,IAAI,CAAA3E,OAAA,aAAAA,OAAA,uBAAAA,OAAA,CAASN,QAAA,KAAY,KAAKwE,gBAAA,CAAiBlE,OAAA,CAAQN,QAAQ;MAC/D,GAAGM,OAAA;MACH0E,UAAA,EAAY;IACd;IAEA,IAAI,CAAC7D,gBAAA,CAAiB+D,SAAA,EAAW;MAC/B/D,gBAAA,CAAiB+D,SAAA,GAAYzI,qBAAA,CAC3B0E,gBAAA,CAAiBnB,QAAA,EACjBmB,gBACF;IACF;IAGA,IAAI,OAAOA,gBAAA,CAAiBgE,kBAAA,KAAuB,aAAa;MAC9DhE,gBAAA,CAAiBgE,kBAAA,GACfhE,gBAAA,CAAiBiE,WAAA,KAAgB;IACrC;IACA,IAAI,OAAOjE,gBAAA,CAAiBuC,YAAA,KAAiB,aAAa;MACxDvC,gBAAA,CAAiBuC,YAAA,GAAe,CAAC,CAACvC,gBAAA,CAAiBkE,QAAA;IACrD;IAEA,IACE,OAAOlE,gBAAA,CAAiBiE,WAAA,KAAgB,eACxCjE,gBAAA,CAAiBmE,SAAA,EACjB;MACAnE,gBAAA,CAAiBiE,WAAA,GAAc;IACjC;IAEA,OAAOjE,gBAAA;EAOT;EAEAoE,uBACEjF,OAAA,EACG;IACH,IAAIA,OAAA,aAAAA,OAAA,eAAAA,OAAA,CAAS0E,UAAA,EAAY;MACvB,OAAO1E,OAAA;IACT;IACA,OAAO;MACL,GAAG1B,qBAAA,OAAAtB,eAAA,EAAqBkI,SAAA;MACxB,IAAI,CAAAlF,OAAA,aAAAA,OAAA,uBAAAA,OAAA,CAASwE,WAAA,KACX,KAAKC,mBAAA,CAAoBzE,OAAA,CAAQwE,WAAW;MAC9C,GAAGxE,OAAA;MACH0E,UAAA,EAAY;IACd;EACF;EAEAS,MAAA,EAAc;IACZ7G,qBAAA,OAAAzB,WAAA,EAAiBsI,KAAA,CAAM;IACvB7G,qBAAA,OAAAvB,cAAA,EAAoBoI,KAAA,CAAM;EAC5B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}