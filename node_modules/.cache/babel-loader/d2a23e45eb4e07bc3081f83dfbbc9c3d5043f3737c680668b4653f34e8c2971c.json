{"ast":null,"code":"import _classPrivateFieldInitSpec from \"/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nvar _focused, _cleanup, _setup;\n// src/focusManager.ts\nimport { Subscribable } from \"./subscribable.js\";\nimport { isServer } from \"./utils.js\";\nvar FocusManager = (_focused = /*#__PURE__*/new WeakMap(), _cleanup = /*#__PURE__*/new WeakMap(), _setup = /*#__PURE__*/new WeakMap(), class FocusManager extends Subscribable {\n  constructor() {\n    super();\n    _classPrivateFieldInitSpec(this, _focused, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _cleanup, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _setup, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _setup, onFocus => {\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus();\n        window.addEventListener(\"visibilitychange\", listener, false);\n        return () => {\n          window.removeEventListener(\"visibilitychange\", listener);\n        };\n      }\n      return;\n    });\n  }\n  onSubscribe() {\n    if (!_classPrivateFieldGet(this, _cleanup)) {\n      this.setEventListener(_classPrivateFieldGet(this, _setup));\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _classPrivateFieldGet2;\n      (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _cleanup)) === null || _classPrivateFieldGet2 === void 0 || _classPrivateFieldGet2.call(this);\n      _classPrivateFieldSet(this, _cleanup, void 0);\n    }\n  }\n  setEventListener(setup) {\n    var _classPrivateFieldGet3;\n    _classPrivateFieldSet(this, _setup, setup);\n    (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _cleanup)) === null || _classPrivateFieldGet3 === void 0 || _classPrivateFieldGet3.call(this);\n    _classPrivateFieldSet(this, _cleanup, setup(focused => {\n      if (typeof focused === \"boolean\") {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    }));\n  }\n  setFocused(focused) {\n    const changed = _classPrivateFieldGet(this, _focused) !== focused;\n    if (changed) {\n      _classPrivateFieldSet(this, _focused, focused);\n      this.onFocus();\n    }\n  }\n  onFocus() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n  isFocused() {\n    var _globalThis$document;\n    if (typeof _classPrivateFieldGet(this, _focused) === \"boolean\") {\n      return _classPrivateFieldGet(this, _focused);\n    }\n    return ((_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.visibilityState) !== \"hidden\";\n  }\n});\nvar focusManager = new FocusManager();\nexport { FocusManager, focusManager };","map":{"version":3,"names":["Subscribable","isServer","FocusManager","_focused","WeakMap","_cleanup","_setup","constructor","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","onFocus","window","addEventListener","listener","removeEventListener","onSubscribe","_classPrivateFieldGet","setEventListener","onUnsubscribe","hasListeners","_classPrivateFieldGet2","call","setup","_classPrivateFieldGet3","focused","setFocused","changed","listeners","forEach","isFocused","_globalThis$document","globalThis","document","visibilityState","focusManager"],"sources":["/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@tanstack/query-core/src/focusManager.ts"],"sourcesContent":["import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable {\n  #focused?: boolean\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibilitychange\n        window.addEventListener('visibilitychange', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    const changed = this.#focused !== focused\n    if (changed) {\n      this.#focused = focused\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach((listener) => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.#focused === 'boolean') {\n      return this.#focused\n    }\n\n    // document global can be unavailable in react native\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return globalThis.document?.visibilityState !== 'hidden'\n  }\n}\n\nexport const focusManager = new FocusManager()\n"],"mappings":";;;;;AAAA,SAASA,YAAA,QAAoB;AAC7B,SAASC,QAAA,QAAgB;AAMlB,IAAMC,YAAA,IAAAC,QAAA,oBAAAC,OAAA,IAAAC,QAAA,oBAAAD,OAAA,IAAAE,MAAA,oBAAAF,OAAA,IAAN,MAAMF,YAAA,SAAqBF,YAAA,CAAa;EAM7CO,YAAA,EAAc;IACZ,MAAM;IAAAC,0BAAA,OAAAL,QAAA;MAAAM,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAH,QAAA;MAAAI,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAF,MAAA;MAAAG,QAAA;MAAAC,KAAA;IAAA;IACNC,qBAAA,OAAAL,MAAA,EAAeM,OAAA,IAAY;MAGzB,IAAI,CAACX,QAAA,IAAYY,MAAA,CAAOC,gBAAA,EAAkB;QACxC,MAAMC,QAAA,GAAWA,CAAA,KAAMH,OAAA,CAAQ;QAE/BC,MAAA,CAAOC,gBAAA,CAAiB,oBAAoBC,QAAA,EAAU,KAAK;QAE3D,OAAO,MAAM;UAEXF,MAAA,CAAOG,mBAAA,CAAoB,oBAAoBD,QAAQ;QACzD;MACF;MACA;IACF;EACF;EAEUE,YAAA,EAAoB;IAC5B,IAAI,CAAAC,qBAAA,CAAC,MAAAb,QAAA,CAAK,EAAU;MAClB,KAAKc,gBAAA,CAAAD,qBAAA,CAAiB,MAAAZ,MAAA,CAAW;IACnC;EACF;EAEUc,cAAA,EAAgB;IACxB,IAAI,CAAC,KAAKC,YAAA,CAAa,GAAG;MAAA,IAAAC,sBAAA;MACxB,CAAAA,sBAAA,GAAAJ,qBAAA,OAAAb,QAAA,eAAAiB,sBAAA,eAAAA,sBAAA,CAAAC,IAAA;MACAZ,qBAAA,OAAAN,QAAA,EAAgB;IAClB;EACF;EAEAc,iBAAiBK,KAAA,EAAsB;IAAA,IAAAC,sBAAA;IACrCd,qBAAA,OAAAL,MAAA,EAAckB,KAAA;IACd,CAAAC,sBAAA,GAAAP,qBAAA,OAAAb,QAAA,eAAAoB,sBAAA,eAAAA,sBAAA,CAAAF,IAAA;IACAZ,qBAAA,OAAAN,QAAA,EAAgBmB,KAAA,CAAOE,OAAA,IAAY;MACjC,IAAI,OAAOA,OAAA,KAAY,WAAW;QAChC,KAAKC,UAAA,CAAWD,OAAO;MACzB,OAAO;QACL,KAAKd,OAAA,CAAQ;MACf;IACF,CAAC;EACH;EAEAe,WAAWD,OAAA,EAAyB;IAClC,MAAME,OAAA,GAAUV,qBAAA,OAAAf,QAAA,MAAkBuB,OAAA;IAClC,IAAIE,OAAA,EAAS;MACXjB,qBAAA,OAAAR,QAAA,EAAgBuB,OAAA;MAChB,KAAKd,OAAA,CAAQ;IACf;EACF;EAEAA,QAAA,EAAgB;IACd,KAAKiB,SAAA,CAAUC,OAAA,CAASf,QAAA,IAAa;MACnCA,QAAA,CAAS;IACX,CAAC;EACH;EAEAgB,UAAA,EAAqB;IAAA,IAAAC,oBAAA;IACnB,IAAI,OAAAd,qBAAA,CAAO,MAAAf,QAAA,CAAK,KAAa,WAAW;MACtC,OAAAe,qBAAA,CAAO,MAAAf,QAAA;IACT;IAIA,OAAO,EAAA6B,oBAAA,GAAAC,UAAA,CAAWC,QAAA,cAAAF,oBAAA,uBAAXA,oBAAA,CAAqBG,eAAA,MAAoB;EAClD;AACF;AAEO,IAAMC,YAAA,GAAe,IAAIlC,YAAA,CAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}