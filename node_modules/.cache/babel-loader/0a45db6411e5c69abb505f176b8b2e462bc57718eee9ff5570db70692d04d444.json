{"ast":null,"code":"import _classPrivateFieldInitSpec from \"/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nvar _mutations, _mutationId, _resuming;\n// src/mutationCache.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Mutation } from \"./mutation.js\";\nimport { matchMutation, noop } from \"./utils.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar MutationCache = (_mutations = /*#__PURE__*/new WeakMap(), _mutationId = /*#__PURE__*/new WeakMap(), _resuming = /*#__PURE__*/new WeakMap(), class MutationCache extends Subscribable {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    _classPrivateFieldInitSpec(this, _mutations, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _mutationId, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _resuming, {\n      writable: true,\n      value: void 0\n    });\n    this.config = config;\n    _classPrivateFieldSet(this, _mutations, []);\n    _classPrivateFieldSet(this, _mutationId, 0);\n  }\n  build(client, options, state) {\n    var _this$mutationId;\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: _classPrivateFieldSet(this, _mutationId, (_this$mutationId = _classPrivateFieldGet(this, _mutationId), ++_this$mutationId)),\n      options: client.defaultMutationOptions(options),\n      state\n    });\n    this.add(mutation);\n    return mutation;\n  }\n  add(mutation) {\n    _classPrivateFieldGet(this, _mutations).push(mutation);\n    this.notify({\n      type: \"added\",\n      mutation\n    });\n  }\n  remove(mutation) {\n    _classPrivateFieldSet(this, _mutations, _classPrivateFieldGet(this, _mutations).filter(x => x !== mutation));\n    this.notify({\n      type: \"removed\",\n      mutation\n    });\n  }\n  clear() {\n    notifyManager.batch(() => {\n      _classPrivateFieldGet(this, _mutations).forEach(mutation => {\n        this.remove(mutation);\n      });\n    });\n  }\n  getAll() {\n    return _classPrivateFieldGet(this, _mutations);\n  }\n  find(filters) {\n    const defaultedFilters = {\n      exact: true,\n      ...filters\n    };\n    return _classPrivateFieldGet(this, _mutations).find(mutation => matchMutation(defaultedFilters, mutation));\n  }\n  findAll() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _classPrivateFieldGet(this, _mutations).filter(mutation => matchMutation(filters, mutation));\n  }\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n  resumePausedMutations() {\n    var _classPrivateFieldGet2;\n    _classPrivateFieldSet(this, _resuming, ((_classPrivateFieldGet2 = _classPrivateFieldGet(this, _resuming)) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : Promise.resolve()).then(() => {\n      const pausedMutations = _classPrivateFieldGet(this, _mutations).filter(x => x.state.isPaused);\n      return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop)), Promise.resolve()));\n    }).then(() => {\n      _classPrivateFieldSet(this, _resuming, void 0);\n    }));\n    return _classPrivateFieldGet(this, _resuming);\n  }\n});\nexport { MutationCache };","map":{"version":3,"names":["notifyManager","Mutation","matchMutation","noop","Subscribable","MutationCache","_mutations","WeakMap","_mutationId","_resuming","constructor","config","arguments","length","undefined","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","build","client","options","state","_this$mutationId","mutation","mutationCache","mutationId","_classPrivateFieldGet","defaultMutationOptions","add","push","notify","type","remove","filter","x","clear","batch","forEach","getAll","find","filters","defaultedFilters","exact","findAll","event","listeners","listener","resumePausedMutations","_classPrivateFieldGet2","Promise","resolve","then","pausedMutations","isPaused","reduce","promise","continue","catch"],"sources":["/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@tanstack/query-core/src/mutationCache.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { Mutation } from './mutation'\nimport { matchMutation, noop } from './utils'\nimport { Subscribable } from './subscribable'\nimport type { MutationObserver } from './mutationObserver'\nimport type { DefaultError, MutationOptions, NotifyEvent } from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Action, MutationState } from './mutation'\nimport type { MutationFilters } from './utils'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: DefaultError,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSettled?: (\n    data: unknown | undefined,\n    error: DefaultError | null,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n}\n\ninterface NotifyEventMutationAdded extends NotifyEvent {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved extends NotifyEvent {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  mutation?: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any, any>\n}\n\ninterface NotifyEventMutationUpdated extends NotifyEvent {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\nexport type MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationObserverOptionsUpdated\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  #mutations: Array<Mutation<any, any, any, any>>\n  #mutationId: number\n  #resuming: Promise<unknown> | undefined\n\n  constructor(public config: MutationCacheConfig = {}) {\n    super()\n    this.#mutations = []\n    this.#mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>,\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.#mutations.push(mutation)\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.#mutations = this.#mutations.filter((x) => x !== mutation)\n    this.notify({ type: 'removed', mutation })\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.#mutations.forEach((mutation) => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Array<Mutation> {\n    return this.#mutations\n  }\n\n  find<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = any,\n    TContext = unknown,\n  >(\n    filters: MutationFilters,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    const defaultedFilters = { exact: true, ...filters }\n\n    return this.#mutations.find((mutation) =>\n      matchMutation(defaultedFilters, mutation),\n    )\n  }\n\n  findAll(filters: MutationFilters = {}): Array<Mutation> {\n    return this.#mutations.filter((mutation) =>\n      matchMutation(filters, mutation),\n    )\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    this.#resuming = (this.#resuming ?? Promise.resolve())\n      .then(() => {\n        const pausedMutations = this.#mutations.filter((x) => x.state.isPaused)\n        return notifyManager.batch(() =>\n          pausedMutations.reduce(\n            (promise, mutation) =>\n              promise.then(() => mutation.continue().catch(noop)),\n            Promise.resolve() as Promise<unknown>,\n          ),\n        )\n      })\n      .then(() => {\n        this.#resuming = undefined\n      })\n\n    return this.#resuming\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}