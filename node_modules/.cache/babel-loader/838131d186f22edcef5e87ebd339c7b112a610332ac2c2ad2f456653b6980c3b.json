{"ast":null,"code":"import _classPrivateMethodInitSpec from \"/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateMethodGet from \"/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js\";\nimport _classPrivateFieldSet from \"/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nvar _client, _result, _queries, _observers, _options, _combinedResult, _setResult, _combineResult, _findMatchingObservers, _onUpdate, _notify;\n// src/queriesObserver.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { replaceEqualDeep } from \"./utils.js\";\nfunction difference(array1, array2) {\n  return array1.filter(x => !array2.includes(x));\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nvar QueriesObserver = (_client = /*#__PURE__*/new WeakMap(), _result = /*#__PURE__*/new WeakMap(), _queries = /*#__PURE__*/new WeakMap(), _observers = /*#__PURE__*/new WeakMap(), _options = /*#__PURE__*/new WeakMap(), _combinedResult = /*#__PURE__*/new WeakMap(), _setResult = /*#__PURE__*/new WeakSet(), _combineResult = /*#__PURE__*/new WeakSet(), _findMatchingObservers = /*#__PURE__*/new WeakSet(), _onUpdate = /*#__PURE__*/new WeakSet(), _notify = /*#__PURE__*/new WeakSet(), class QueriesObserver extends Subscribable {\n  constructor(client, _queries2, _options2) {\n    super();\n    _classPrivateMethodInitSpec(this, _notify);\n    _classPrivateMethodInitSpec(this, _onUpdate);\n    _classPrivateMethodInitSpec(this, _findMatchingObservers);\n    _classPrivateMethodInitSpec(this, _combineResult);\n    _classPrivateMethodInitSpec(this, _setResult);\n    _classPrivateFieldInitSpec(this, _client, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _result, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _queries, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _observers, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _options, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _combinedResult, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _client, client);\n    _classPrivateFieldSet(this, _queries, _queries2);\n    _classPrivateFieldSet(this, _options, _options2);\n    _classPrivateFieldSet(this, _observers, []);\n    _classPrivateMethodGet(this, _setResult, _setResult2).call(this, []);\n    this.setQueries(_queries2, _options2);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      _classPrivateFieldGet(this, _observers).forEach(observer => {\n        observer.subscribe(result => {\n          _classPrivateMethodGet(this, _onUpdate, _onUpdate2).call(this, observer, result);\n        });\n      });\n    }\n  }\n  onUnsubscribe() {\n    if (!this.listeners.size) {\n      this.destroy();\n    }\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */new Set();\n    _classPrivateFieldGet(this, _observers).forEach(observer => {\n      observer.destroy();\n    });\n  }\n  setQueries(queries, options, notifyOptions) {\n    _classPrivateFieldSet(this, _queries, queries);\n    _classPrivateFieldSet(this, _options, options);\n    notifyManager.batch(() => {\n      const prevObservers = _classPrivateFieldGet(this, _observers);\n      const newObserverMatches = _classPrivateMethodGet(this, _findMatchingObservers, _findMatchingObservers2).call(this, _classPrivateFieldGet(this, _queries));\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n      _classPrivateFieldSet(this, _observers, newObservers);\n      _classPrivateMethodGet(this, _setResult, _setResult2).call(this, newResult);\n      if (!this.hasListeners()) {\n        return;\n      }\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          _classPrivateMethodGet(this, _onUpdate, _onUpdate2).call(this, observer, result);\n        });\n      });\n      _classPrivateMethodGet(this, _notify, _notify2).call(this);\n    });\n  }\n  getCurrentResult() {\n    return _classPrivateFieldGet(this, _combinedResult);\n  }\n  getQueries() {\n    return _classPrivateFieldGet(this, _observers).map(observer => observer.getCurrentQuery());\n  }\n  getObservers() {\n    return _classPrivateFieldGet(this, _observers);\n  }\n  getOptimisticResult(queries) {\n    const matches = _classPrivateMethodGet(this, _findMatchingObservers, _findMatchingObservers2).call(this, queries);\n    const result = matches.map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n    return [result, r => {\n      return _classPrivateMethodGet(this, _combineResult, _combineResult2).call(this, r !== null && r !== void 0 ? r : result);\n    }, () => {\n      return matches.map((match, index) => {\n        const observerResult = result[index];\n        return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult) : observerResult;\n      });\n    }];\n  }\n});\nfunction _setResult2(value) {\n  _classPrivateFieldSet(this, _result, value);\n  _classPrivateFieldSet(this, _combinedResult, _classPrivateMethodGet(this, _combineResult, _combineResult2).call(this, value));\n}\nfunction _combineResult2(input) {\n  var _classPrivateFieldGet2;\n  const combine = (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _options)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.combine;\n  if (combine) {\n    return replaceEqualDeep(_classPrivateFieldGet(this, _combinedResult), combine(input));\n  }\n  return input;\n}\nfunction _findMatchingObservers2(queries) {\n  const prevObservers = _classPrivateFieldGet(this, _observers);\n  const prevObserversMap = new Map(prevObservers.map(observer => [observer.options.queryHash, observer]));\n  const defaultedQueryOptions = queries.map(options => _classPrivateFieldGet(this, _client).defaultQueryOptions(options));\n  const matchingObservers = defaultedQueryOptions.flatMap(defaultedOptions => {\n    const match = prevObserversMap.get(defaultedOptions.queryHash);\n    if (match != null) {\n      return [{\n        defaultedQueryOptions: defaultedOptions,\n        observer: match\n      }];\n    }\n    return [];\n  });\n  const matchedQueryHashes = new Set(matchingObservers.map(match => match.defaultedQueryOptions.queryHash));\n  const unmatchedQueries = defaultedQueryOptions.filter(defaultedOptions => !matchedQueryHashes.has(defaultedOptions.queryHash));\n  const getObserver = options => {\n    const defaultedOptions = _classPrivateFieldGet(this, _client).defaultQueryOptions(options);\n    const currentObserver = _classPrivateFieldGet(this, _observers).find(o => o.options.queryHash === defaultedOptions.queryHash);\n    return currentObserver !== null && currentObserver !== void 0 ? currentObserver : new QueryObserver(_classPrivateFieldGet(this, _client), defaultedOptions);\n  };\n  const newOrReusedObservers = unmatchedQueries.map(options => {\n    return {\n      defaultedQueryOptions: options,\n      observer: getObserver(options)\n    };\n  });\n  const sortMatchesByOrderOfQueries = (a, b) => defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n  return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n}\nfunction _onUpdate2(observer, result) {\n  const index = _classPrivateFieldGet(this, _observers).indexOf(observer);\n  if (index !== -1) {\n    _classPrivateMethodGet(this, _setResult, _setResult2).call(this, replaceAt(_classPrivateFieldGet(this, _result), index, result));\n    _classPrivateMethodGet(this, _notify, _notify2).call(this);\n  }\n}\nfunction _notify2() {\n  notifyManager.batch(() => {\n    this.listeners.forEach(listener => {\n      listener(_classPrivateFieldGet(this, _result));\n    });\n  });\n}\nexport { QueriesObserver };","map":{"version":3,"names":["notifyManager","QueryObserver","Subscribable","replaceEqualDeep","difference","array1","array2","filter","x","includes","replaceAt","array","index","value","copy","slice","QueriesObserver","_client","WeakMap","_result","_queries","_observers","_options","_combinedResult","_setResult","WeakSet","_combineResult","_findMatchingObservers","_onUpdate","_notify","constructor","client","queries","options","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","_classPrivateMethodGet","_setResult2","call","setQueries","onSubscribe","listeners","size","_classPrivateFieldGet","forEach","observer","subscribe","result","_onUpdate2","onUnsubscribe","destroy","Set","notifyOptions","batch","prevObservers","newObserverMatches","_findMatchingObservers2","match","setOptions","defaultedQueryOptions","newObservers","map","newResult","getCurrentResult","hasIndexChange","some","length","hasListeners","_notify2","getQueries","getCurrentQuery","getObservers","getOptimisticResult","matches","r","_combineResult2","observerResult","notifyOnChangeProps","trackResult","input","_classPrivateFieldGet2","combine","prevObserversMap","Map","queryHash","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","get","matchedQueryHashes","unmatchedQueries","has","getObserver","currentObserver","find","o","newOrReusedObservers","sortMatchesByOrderOfQueries","a","b","indexOf","concat","sort","listener"],"sources":["/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@tanstack/query-core/src/queriesObserver.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: (result: Array<QueryObserverResult>) => TCombinedResult\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #observers: Array<QueryObserver>\n  #options?: QueriesObserverOptions<TCombinedResult>\n  #combinedResult!: TCombinedResult\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#queries = queries\n    this.#options = options\n    this.#observers = []\n\n    this.#setResult([])\n    this.setQueries(queries, options)\n  }\n\n  #setResult(value: Array<QueryObserverResult>) {\n    this.#result = value\n    this.#combinedResult = this.#combineResult(value)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.#queries = queries\n    this.#options = options\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#setResult(newResult)\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): TCombinedResult {\n    return this.#combinedResult\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result)\n      },\n      () => {\n        return matches.map((match, index) => {\n          const observerResult = result[index]!\n          return !match.defaultedQueryOptions.notifyOnChangeProps\n            ? match.observer.trackResult(observerResult)\n            : observerResult\n        })\n      },\n    ]\n  }\n\n  #combineResult(input: Array<QueryObserverResult>): TCombinedResult {\n    const combine = this.#options?.combine\n    if (combine) {\n      return replaceEqualDeep(this.#combinedResult, combine(input))\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObservers = this.#observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.#client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: Array<QueryObserverMatch> =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const currentObserver = this.#observers.find(\n        (o) => o.options.queryHash === defaultedOptions.queryHash,\n      )\n      return (\n        currentObserver ?? new QueryObserver(this.#client, defaultedOptions)\n      )\n    }\n\n    const newOrReusedObservers: Array<QueryObserverMatch> =\n      unmatchedQueries.map((options) => {\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      })\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#setResult(replaceAt(this.#result, index, result))\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.#result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}