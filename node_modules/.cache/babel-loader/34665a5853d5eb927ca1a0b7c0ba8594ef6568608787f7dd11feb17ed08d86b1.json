{"ast":null,"code":"// src/hydration.ts\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.meta && {\n      meta: mutation.meta\n    })\n  };\n}\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.meta && {\n      meta: query.meta\n    })\n  };\n}\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === \"success\";\n}\nfunction dehydrate(client) {\n  var _options$shouldDehydr, _options$shouldDehydr2;\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const filterMutation = (_options$shouldDehydr = options.shouldDehydrateMutation) !== null && _options$shouldDehydr !== void 0 ? _options$shouldDehydr : defaultShouldDehydrateMutation;\n  const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);\n  const filterQuery = (_options$shouldDehydr2 = options.shouldDehydrateQuery) !== null && _options$shouldDehydr2 !== void 0 ? _options$shouldDehydr2 : defaultShouldDehydrateQuery;\n  const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query)] : []);\n  return {\n    mutations,\n    queries\n  };\n}\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n    return;\n  }\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache();\n  const mutations = dehydratedState.mutations || [];\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    var _options$defaultOptio;\n    mutationCache.build(client, {\n      ...(options === null || options === void 0 || (_options$defaultOptio = options.defaultOptions) === null || _options$defaultOptio === void 0 ? void 0 : _options$defaultOptio.mutations),\n      mutationKey: dehydratedMutation.mutationKey,\n      meta: dehydratedMutation.meta\n    }, dehydratedMutation.state);\n  });\n  queries.forEach(_ref => {\n    var _options$defaultOptio2;\n    let {\n      queryKey,\n      state,\n      queryHash,\n      meta\n    } = _ref;\n    const query = queryCache.get(queryHash);\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        const {\n          fetchStatus: _ignored,\n          ...dehydratedQueryState\n        } = state;\n        query.setState(dehydratedQueryState);\n      }\n      return;\n    }\n    queryCache.build(client, {\n      ...(options === null || options === void 0 || (_options$defaultOptio2 = options.defaultOptions) === null || _options$defaultOptio2 === void 0 ? void 0 : _options$defaultOptio2.queries),\n      queryKey,\n      queryHash,\n      meta\n    },\n    // Reset fetch status to idle to avoid\n    // query being stuck in fetching state upon hydration\n    {\n      ...state,\n      fetchStatus: \"idle\"\n    });\n  });\n}\nexport { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, hydrate };","map":{"version":3,"names":["dehydrateMutation","mutation","mutationKey","options","state","meta","dehydrateQuery","query","queryKey","queryHash","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","status","dehydrate","client","_options$shouldDehydr","_options$shouldDehydr2","arguments","length","undefined","filterMutation","shouldDehydrateMutation","mutations","getMutationCache","getAll","flatMap","filterQuery","shouldDehydrateQuery","queries","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","forEach","dehydratedMutation","_options$defaultOptio","build","defaultOptions","_ref","_options$defaultOptio2","get","dataUpdatedAt","fetchStatus","_ignored","dehydratedQueryState","setState"],"sources":["/Users/sofiaetchegoin/Documents/devacademy/bootcamp/welcome/node_modules/@tanstack/query-core/src/hydration.ts"],"sourcesContent":["import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  meta?: QueryMeta\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ?? defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ?? defaultShouldDehydrateQuery\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) => (filterQuery(query) ? [dehydrateQuery(query)] : []))\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach((dehydratedMutation) => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n        meta: dehydratedMutation.meta,\n      },\n      dehydratedMutation.state,\n    )\n  })\n\n  queries.forEach(({ queryKey, state, queryHash, meta }) => {\n    const query = queryCache.get(queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        // omit fetchStatus from dehydrated state\n        // so that query stays in its current fetchStatus\n        const { fetchStatus: _ignored, ...dehydratedQueryState } = state\n        query.setState(dehydratedQueryState)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey,\n        queryHash,\n        meta,\n      },\n      // Reset fetch status to idle to avoid\n      // query being stuck in fetching state upon hydration\n      {\n        ...state,\n        fetchStatus: 'idle',\n      },\n    )\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}